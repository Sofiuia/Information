
//Структура struct– це користувацький тип даних,об'єдн кілька змінних або полів різних типів під одним іменем.
struct Car {
    string brand;
    int year;
    double price;
};
//Структури використовуються для згрупування кількох змінних, які належать до одного об'єкта. 
//ключове слова struct, після чого вказуються  поля.
struct Student {
    string name;
    int age;
    double gpa;
};
//Комп'ютер виділяє пам’ять під кожне поле структури послідовно або з вирівнюванням, що може призводити до додаткового використання пам’яті.

//Змінні структури можна створювати так само, як змінні інших типів:
Student s1;  // Оголошення змінної структури
s1.name = "Alice";
s1.age = 20;
s1.gpa = 3.8;

//Доступ здійснюється через оператор .:
cout << "Name: " << s1.name << endl;
cout << "Age: " << s1.age << endl;
cout << "GPA: " << s1.gpa << endl;

//Можна одразу задавати значення полів:
struct Student {
    string name = "Unknown";
    int age = 18;
    double gpa = 0.0;
};

//Структури можна копіювати і присвоювати напряму:
Student s2 = s1;  // Копіювання структури

//Якщо структура містить вказівники, то копіювання призведе до спільного використання пам’яті, що може викликати проблеми.
struct Node {
    int value;
    Node* next;
};

//Вказівник на структуру використовується для роботи з динамічною пам’яттю.
Student* ptr = &s1;
cout << ptr->name;  // Використання оператора -> для доступу до полів

//Посилання дозволяють працювати зі структурами без копіювання.
void printStudent(const Student& s) {
    cout << s.name << " " << s.age << " " << s.gpa << endl;
}

//Поле структури можна зробити константним:
struct Config {
    const int maxUsers = 100;
};

//Можна створювати масиви структур:
Student group[3] = { {"Alice", 20, 3.8}, {"Bob", 22, 3.5}, {"Charlie", 21, 3.9} };

//Динамічне виділення пам’яті:
Student* s = new Student{"Eve", 19, 3.7};
delete s;  // Видалення пам’яті

//Оголошення перед використанням необхідне, коли структури взаємозалежні.
struct B;  // Попереднє оголошення
struct A {
    B* ptr;
};
struct B {
    A* ptr;

//Одна структура може містити іншу:
struct Address {
    string city;
    string street;
};

struct Person {
    string name;
    Address address;
};

//Анонімні структури не мають імені:
struct {
    int x, y;
} point;

//Можна описувати структури безпосередньо в функціях:
void func() {
    struct Temp {
        int value;
    } t;
}


//Структури можна передавати як аргумент:
void printStudent(Student s) {  // Передача за значенням
    cout << s.name;
}
//Або за посиланням:
void printStudent(const Student& s) {  // Передача за посиланням
    cout << s.name;
}