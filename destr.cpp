/*Деструктор – це така штука в класах C++, яка сама запускається, коли об'єкт зникає.
 Його задача – прибрати за собою, закрити всі відкриті файли, 
звільнити память, якщо її виділяли, і взагалі зробити так, щоб нічого не залишилось "висіти".
Якщо конструктор створює і налаштовує об'єкт, то деструктор його знищує і прибирає.
Cинтаксис
Ім'я деструктора = ім'я класу, але з ~ перед ним.
Нічого не повертає.
Не може мати аргументів.
В класі може бути тільки один деструктор.
*/
class Massiv {
private:
    int *m_array;

public:
    Massiv(int length) {  // Конструктор
        m_array = new int[length];
    }

    ~Massiv() {  // Деструктор
        delete[] m_array;  // Чистимо память
    }
};
/*Коли об'єкт класу Massiv створюється, в конструкторі виділяється память (new). А коли об'єкт зникає (наприклад, закінчується дія main()), деструктор (~Massiv()) сам викликається і очищає память (delete[]).
Коли викликається деструктор?
Коли об'єкт створений в стеку виходить з області видимості:*/
void func() {
    Massiv arr(10); // тут конструктор
} // тут автоматично викличеться деструктор
//Коли викликається delete для динамічного об'єкта:
Massiv *arr = new Massiv(10); 
delete arr; // викликається деструктор
//Коли завершується програма .

/*Об'єкт obj створюється → запускається його конструктор.
В кінці main() об'єкт obj зникає → запускається його деструктор.
RAII– це принцип, який допомагає автоматично керувати ресурсами. Суть в тому, що ресурси (память, файли тощо) виділяються в конструкторі і звільняються в деструкторі.*/
