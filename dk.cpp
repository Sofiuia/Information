
/*Делегуючі конструктори – це механізм у C++, який дозволяє одному конструктору викликати інший конструктор у тому ж класі. Це зменшує дублювання коду та спрощує ініціалізацію об'єктів.
Проблема
Якщо клас має кілька конструкторів, які виконують схожі дії, код доводиться повторювати. Це ускладнює підтримку програми.
У кожному конструкторі доводиться писати однаковий код для ініціалізації змінних, що ускладнює внесення змін.
Рішення – використання делегуючих конструкторів
У C++11 з’явилася можливість викликати один конструктор з іншого через список ініціалізації:*/
class Person {
private:
    std::string m_name;
    int m_age;

public:
    // Основний конструктор
    Person(const std::string& name, int age) : m_name(name), m_age(age) {}

    // Конструктор без параметрів викликає основний
    Person() : Person("Невідомий", 0) {}

    // Конструктор з іменем викликає основний, вік за замовчуванням 18
    Person(const std::string& name) : Person(name, 18) {}
};

//При створенні об'єкта викликається відповідний конструктор:
Person p1;          // Викликає Person("Невідомий", 0)
Person p2("Іван");  // Викликає Person("Іван", 18)
Person p3("Марія", 25);  // Викликає основний конструктор без делегування
/*Делегуючі конструктори дозволяють одному конструктору викликати інший у тому ж класі.
Вони допомагають зменшити дублювання коду та спрощують його підтримку.
Основний конструктор виконує всю ініціалізацію, а решта його викликають із потрібними параметрами.
Не можна ініціалізувати змінні напряму та одночасно викликати інший конструктор.
Не можна робити циклічні виклики конструкторів, бо це спричинить збій програми.
Використання делегуючих конструкторів робить код чистішим, зрозумілішим і зручнішим у використанні.