#include <iostream>

int main()
{

    //Вказівник - змінна , яка зберігає в собі адресу.
    /*
    Cинтаксис створенння вказівника:
    1. тип_даних *Імʼя_вказівника;
    2 тип_даних *Імʼя_вказівника = Адреса; <- ініціалізація

    */

   //int a;
   //int* p;// вказує сміття(рандмна точка)


   //Щоб створити 2 вказівника
   //int a, b;
   //int* p1, * p2;

    int a = 5;

    int* p = &a;// вказівник - це змінна, його можна змінювати
    //&- один амперсант, отримання нашої адреси
    // адреса відображається в 16 системі счислення

    *p = 0;
    //за допомогою розіменування вказівника можемо змінити його значення
    // дає доступ до зміної
    std::cout << "a= " << a << std::endl;
    std::cout << "&a= " << a << std::endl;


    std::cout << "p= " << *p << std::endl;

    //розіменування адреси, розкриття ії щоб дізнатись, що в ній лежить
    //<< *p << ми хочемо розіменувтаи, тоюто дає значення яке дежить за цією адресою

    //робота з константами
  
    const int a = 5;
    const int b = 10;
    const int* p ;
   // через них не можемо міняти дані


    std::cout << "&a= " << &a << std::endl;
    std::cout << "p = " << p << std::endl;
     std::cout << "a = " << a << std::endl;
    std::cout << "*p =  " << *p << std::endl;

    std::cout << "&b= " << &b << std::endl;
    std::cout << "p = " << p << std::endl;
    std::cout << "b = " << b << std::endl;
    std::cout << "*p =  " << *p << std::endl;

    //вказівник також змінна, яка знаходиться в памʼяті. її адресу теж можна викорстовувати



    //вказівник на вказівник
    int a = 5;
    int* p = &a;
   int** p = &p;
   // через них не можемо міняти дані


   
    std::cout << "p = " << p << std::endl;
     std::cout << "&a= " << &a << std::endl;

//Вказівник на масив
/*

int arr[] = {10, 20, 30};
int* p = arr; // Те ж саме, що &arr[0]

cout << "Перший елемент: " << *p << endl;   
cout << "Другий елемент: " << *(p + 1) << endl; */

//Вказівник на константий масив
/*
const int arr[] = {1, 2, 3};
const int* p = arr; // p не може змінювати значення масиву*/

//Константний вказівник

int x = 10;
int y = 20;
int* const ptr = &x; // ptr не може змінювати адресу
//ptr = 15; 
//ptr = &y; // Помилка

//Нульовий вказівник

int* ptr = nullptr;
if (ptr == nullptr) 
std::cout << "Вказівник пустий!\n";



//Вказівник на функцію
void hello(); 

    std::cout << "Привіт!\n"; 


int main() {
    void (*funcP)() = hello; // Вказівник на функцію
    funcP(); // Викликаємо функцію через вказівник

}




//Вказівник void
void* ptr;
int x = 10;
ptr = &x; 
std::cout << *(static_cast<int*>(ptr)) << std::endl;


//Арифметика вказівників

int arr[] = {10, 20, 30};
int* p = arr;
std::cout << *(p + 1) << std::endl; // 20


//Схожість між масивом і вказівником 

int arr[] = {1, 2, 3};
std::cout << *arr << std::endl; // == arr[0]
std::cout << *(arr + 1) << std::endl; // == arr[1]



//Вказівник як параметр функції
 int x = 5;
    int* ptr = &x;  // Вказівник на x
    *ptr = 100;     // Змінюємо значення через вказівник
    std::cout << x << std::endl; // 100








    return 0;
}