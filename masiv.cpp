#include <iostream>

int main()
{
//одновимірні масиви(кожен елемн якого має 1 індекс)
//масив - іменована сукупність однотипних даних, бремо дані однакового типу, які зберігаються в одній області і ця область має своє імʼя
/*
Синтаксис створення змінної
Тип_даних Імʼя_змінної

Синтаксис створення масиву
Тип_даних імʼя_масиву[кількість елементів]
int arr[100];

Процессор повиннен розуміти скільки байтів треба за типом даних, 
щоб зберігти. в оперативній памʼяті виділяється підходяша область 
та приймає імʼя нашого масиву. Не маємо право присвоювати масиву якес значення, немає куди збеігати. 
Елемент - змінна, яка знаходиться в масиві.
Треба вказувати імʼя масиву, кожен ілемнт має індекс з 0.

Синтаксис звернення до елемнта масиву:
Імʼя_масиву[індекс_елементу]

Що ми можемо записувати в квадратних дужках?
додатні літерали, любий цілочисельний додатній літерал, константи.

Розмір масиву визначається на етапі коомпіляції
Значення змінної вираховується на етапі виконання програми

*/

const int SIZE = 10;// визначаємо розмір масиву, коли всюди імʼя константи
//міняємо тільки в ній

//список ініціалізації

int arr[SIZE] = { 10, 20, 30, 40, 50};//якщо значень менше , всі значення заповняться нулями
// дробові числа завжди стануть цілими, бо в масивах вони не перевіряються.

int arr[10];

for (int index = 0; index < 10; index++)
    arr[index] = index + index;


for (int index = 0; index < 10; index++)
std::cout << "arr["<< index << "] = " << arr[index] << std::endl;



/*arr[0] = 10;
arr[1] = 20;
arr[2] = 30;

std::cout << "arr["<< 0 << "] = " << arr[0] << std::endl;
std::cout << "arr["<< 1 << "] = " << arr[1] << std::endl;
std::cout << "arr["<< 2 << "] = " << arr[2] << std::endl;*/

/* коли створюємо масив з певною кількістю елементів спочатку там зберігається сміття
Якщо змінну ми взагалі не зможемо вивести, то масив виведеться через те що це адреса.
коли звертаємось через адресу коомпілятор не може перевірити.


Індекс [-1], тобто ми хочемо записати в область до якої не маємо значення.
Індексація - переміщення відносно перщого елементу.
*/




//Багатовимірні масиви
/*
Кількість рядків - кількість масивів
Кількість стовпців - кількість елементів в кожному масиві.arr
Двовимірний масив - кожен елемнт якого це масив або має 2 індекси.
Багатовимірний масив - масив масивів.

Синтаксис двовимірного
ТИп_даних імʼя_масиву[кількість_підмасивів][кількість елемнтів];
*/


//Синтаксис звернення до двовимірного мсаиву:
//Імʼя масиву[Індекс_підмасиву][Індекс_елементу підмсаиву];
int arr[2];
const int WEEKS = 3, DAYS = 2;
int temperatures[WEEKS][DAYS];



/* 
for ( int i = 0; i < WEEKS; i++)
    for (int j = 0; j < DAYS; j++)
         temperatures[i][j] = j + i * j + i;
*/


/*for (int i = 0; i < DAYS; i++)
    temperatures[0][i] = i * i + i;

for (int i = 0; i < DAYS; i++)
    temperatures[1][i] = i * i + i;

for (int i = 0; i < DAYS; i++)
    temperatures[2][i] = i * i + i;*/



temperatures[0][0] = 2;
temperatures[0][1] = 4;

temperatures[1][0] = 78;
temperatures[1][1] = 3;

temperatures[2][0] = 5;
temperatures[2][1] = 65;

std::cout << "tempetures[" << 0 << "][" << 0 << "] = " << temperatures[0][0] << std::endl;
std::cout << "tempetures[" << 0 << "][" << 1 << "] = " << temperatures[0][1] << std::endl;

std::cout << "tempetures[" << 1 << "][" << 0 << "] = " << temperatures[1][0] << std::endl;
std::cout << "tempetures[" << 1 << "][" << 1 << "] = " << temperatures[1][1] << std::endl;

std::cout << "tempetures[" << 2 << "][" << 0 << "] = " << temperatures[2][0] << std::endl;
std::cout << "tempetures[" << 2 << "][" << 1 << "] = " << temperatures[2][1] << std::endl;


/*Список ініціалізаціїї

const int WEEKS = 3, DAYS = 2;
int temperatures[WEEKS][DAYS] = 
{
    {10, 20}, 
    {100, 200}, 
    {1000, 2000}
}
*/




/*
Масиви рядки, використовуються для того щоб зберегти якийсь текст
рядки мови С 
string
 */

char word[30];


/*char ch;
std::cout << ch;
for (int i = 1; i < 30 && ch != '\n'; i++)
{
    std::cout << word[1];
}*/


//рядок уе масив, який містить в собі 0символ.
char greeting1[] = { 'H', 'e', 'l', 'o'};//Масив
char greeting2[] = "Hello";//Рядок, буде 6 стимволів через 0 символ

std::cout << greeting2[] << std::endl;/*не ттеба зберігати про їх розмір. */
// '/0' - нуль символ, позначає кінецб послідовності символів. 
// з рядка можемо пускати розмір



    return 0;
}